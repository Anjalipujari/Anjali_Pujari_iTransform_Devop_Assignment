Assignment

NOTE: Do not forget to see manual page using "--help" option in command when searching for options/commands for a particular task.

1. Install Docker, either on your native OS or on a VM. Make sure it runs. type "docker -v" to check if it's installed.
   try below commands for help
	docker --help  ---> This command shows all available options and commands to work with images and containers
	docker images --help ---> This command shows all the avaialble options and commands to work with docker images
	docker ps --help ---> This command shows all the avaialble options and commands to work with docker containers
ANS:  C:\Users\Anjali>docker -v
      Docker version 20.10.6, build 370c289

    
2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub
ANS:  docker pull nginx

      
3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.
ANS:  docker images
    
4. Find out the "Full" ImageId of the image that you pulled and write it below.
ANS: C:\Users\Anjali> docker images --no-trunc
     REPOSITORY                    TAG       IMAGE ID                                                                  CREATED        SIZE
     nginx                         latest    sha256:f0b8a9a541369db503ff3b9d4fa6de561b300f7363920c2bff4577c6c24c5cf6   4 days ago     133MB

5. Create a container of your image 
ANS: STEP 1:
     C:\Users\Anjali>docker run -d nginx
     6d1ecc95788bc68a33144fee6b6f10e091b1bf14042da6566bb244e97302a413
     Step 2:
     C:\Users\Anjali>docker ps
     CONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS              PORTS     NAMES
     6d1ecc95788b   nginx     "/docker-entrypoint.…"   About a minute ago   Up About a minute   80/tcp    strange_solomon

6. List all the running containers
ANS: C:\Users\Anjali>docker ps
     CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES
     6d1ecc95788b   nginx     "/docker-entrypoint.…"   12 minutes ago   Up 12 minutes   80/tcp    strange_solomon

7. List all the running and stopped containers
ANS: docker ps -a
     docker ps -aq 
    
8. Find out the "Full" containerId of the container and write it below.
ANS: docker ps --no-trunc

9. Find out how many image layers are used to build this image.
ANS: docker history nginx (docker history image_name)

10. Get the Apache Tomcat 7 server image from the docker hub.
ANS: docker pull tomcat:7.0.90

11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.
ANS: docker run -d tomcat:7.0.90
     69d71d134165756128b1d0b6a771dbd9c4412af1402e36ac96d043e3d43dd252
     docker ps
    
12. Find out what is the IP Address of the Apache Tomcat Container that it is running on
ANS: docker inspect <containerId> 
     In NetwrorkSettings we get  "IPAddress": "172.17.0.3"

13. Which Port it is using?
ANS: docker inspect --format '{{.NetworkSettings.Ports}}' 69d71d134165
     Port : 8080 is used by tomcat 7.0.90 

14. Try to access the Tomcat's home page from your machine/vm.
ANS: use command docker run -it --rm 8080:8080 tomcat:7.0.90 tomcat server will start and we can access the Tomcat's home page.
     http://localhost:8080/  which opens the window with a congratulatory message for successful installation and execution of Tomcat.

15. What is the disk size of Apache Tomcat image?
ANS:docker inspect --format '{{.Size}}' <image id of tomcat>

16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
ANS: docker exec 69d71d134165 env
     "JAVA_HOME=/docker-java-home/jre" - JAVA_HOME is an Environment Variable set to the location of the Java directory on our computer
     "CATALINA_HOME=/usr/local/tomcat" - CATALINA_HOME is the folder where Apache Tomcat is installed

17. Find out which port is exposed for tomcat?
ANS: docker port a24e0d6ba584-(container id of tomcat:7.0.90)

18. Run multiple conntainers of tomcat on different port and access it's home page.
ANS: docker run -d -p 8800:8080 tomcat:7.0.90
     docker run -d -p 8888:8080 tomcat:7.0.90

19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
ANS: docker pull ubuntu:16.04
     docker pull ubuntu:18.04

20. Run the container of ubuntu in attached mode.
ANS: docker run -it ubuntu:18.04

21. Run the container of another ubuntu in detached mode.
ANS: docker run -d ubuntu:16.04 

22. Check how many ubuntu containers are running and stopped
ANS: docker ps -a

23. Is the tomcat container running? If no, start one.
ANS: docker ps - shows all containers which are running 
     docker run tomcat:7.0.90 - for starting tomcat.

24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).
ANS: docker logs 4db23fa8eec5

25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.
ANS: docker ps
     docker run -it <imageid> 

26. Login as root user in ubuntu container
ANS: docker exec -u 0 7612d97ad53a whoami
     7612d97ad53a it is containerID for ubuntu:18.04

27. Create a file with any name in root directory
ANS: docker exec -it 7612d97ad53a bash
     touch sample.txt

28. Install software of your choice in ubuntu container using "apt-get install"
ANS: docker run -it ubuntu:18.04 bash
    apt-get update
    apt-get install python

29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
ANS: exit or ctrl+d will help to exit the shell

30. Check if the ubuntu container is running.
ANS: docker ps

31. Create a new ubuntu container out of the same image as that previous container in attached mode.
ANS: docker run -it ubuntu:18.04

32. Login as a root user
ANS: docker exec -it 7612d97ad53a bash

33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
ANS: docker rm -f 7612d97ad53a

34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
ANS: Yes i have previous ubuntu container.

35. Create an Image out of the existing container.
ANS: docker run --name myubun ubuntu:18.04

36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
ANS: docker run -it  myubun bash
     root@17017c0adb99:/# login
     root@17017c0adb99:/# ls 
     
37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
ANS:  docker rm -f 69d71d134165

38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>
Now, Start a tomcat container in such a way that on hitting its URL for home page it should show the above html page.
ANS: C:\Users\Anjali>docker exec -it c4a7c77accd4 bash
     root@c4a7c77accd4:/usr/local/tomcat# ls
     root@c4a7c77accd4:/usr/local/tomcat# cd webapps
     root@c4a7c77accd4:/usr/local/tomcat/webapps# mkdir ROOT
     root@c4a7c77accd4:/usr/local/tomcat/webapps# cd ROOT
     root@c4a7c77accd4:/usr/local/tomcat/webapps/ROOT# echo "<h1>This is Tomcat Container </h1>" > index.html
     root@c4a7c77accd4:/usr/local/tomcat/webapps/ROOT# cat index.html
     <h1>This is Tomcat Container </h1>
     Go to Browser and use localhost:8787 it shows output as This is Tomcat Container

39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a 
2. -f
3. -q

write atleast 1 command using each option above and prove their concepts as described in the --help.
ANS: docker images -a            [-a, --all             Show all images (default hides intermediate images) ]
     docker images -f --no-trunc [--no-trunc        Don't truncate output ]
     docker images -q            [-q, --quiet           Only show image IDs ]

40. type below command:-
	docker ps --help
Now, try to run command that proves the concept of following six options:-
1. -a
2. -f
3. -q
4. -n
5. -l
6. -s

write atleast 1 command using each option above and prove their concepts as described in the --help.
ANS: docker ps -a                      [ -a, --all             Show all containers (default shows just running) ]
     docker ps --filter "name=beauty"  [ -f, --filter filter   Filter output based on conditions provided
     docker ps -q                      [ -q, --quiet           Only display container IDs ]
     docker ps -n                      [ --last int            Show n last created containers (includes all states) (default -1) ]
     docker ps -l                      [ -l, --latest          Show the latest created container (includes all states) ]
     docker ps -s                      [ -s, --size            Display total file sizes ]


41. Type below command:-
	docker --help

you will various sections of commands apart from options like "Managemnet Commands" and "Commands".


Write some texts below describing the use of "Management Commands".
ANS: Management command section consist of options that can be used with docker like image, volume, node, swarm.


Use each command mentioned below and prove its concepts as described in the --help desription. write what you have understood from the output of the command after its successful execution.
1. cp
2. create
3. export
4. history
5. info
6. login
7. logout
8. rename
9. save
10. stats
11. top
ANS: docker cp myimg1:/var/home   --------> [ Copy files/folders between a container and the local filesystem ]
     docker create -t -i ubuntu bash -----> [ Create a new container ]
     docker export ubuntu_1 > latest.tar->  [ Export a container’s filesystem as a tar archive ]
     docker history ubuntu      ----------> [ Show the history of an image ]
     docker info              ------------> [ Display system-wide information ]
     docker login localhost:8080 ---------> [ Log in to a Docker registry ]
     docker logout localhost:8080 --------> [ Log out from a Docker registry ]
     docker rename ubuntu_1 my_ubuntu ----> [ Rename a container ]
     docker save my_ubuntu  --------------> [ Save one or more images to a tar archive (streamed to STDOUT by default) ]
     docker stats           --------------> [ Display a live stream of container(s) resource usage statistics ]
     docker top container  ---------------> [ Display the running processes of a container ]


42. Kill all running container in one liner command.
ANS: docker kill $(docker ps -q)

43. Delete all images in one liner command.
ANS: docker rmi $(docker images -a -q)


44. Create a simple Dockerfile, build it and run it.
ANS: STEP 1: vim Dockerfile (edit and save file)
     STEP 2: docker build -t myimage .
     STEP 3: docker run -p 8800:8800 myimage

45. Create one or more Dockerfile that demostrate the following commands in Dockerfile (Write a PoC for each in one or more Dockerfile)
	1. USER
	2. RUN
	3. ENV
	4. CMD
	5. RUN
	6. ENTRYPOINT
	7. EXPOSE
	8. VOLUME
ANS: mkdir Dockerfile
     cd Dockerfile
     vi Dockerfile
   -->edit file using above commands  
     # escape=\
     FROM ubuntu
     MAINTAINER anjali pujari <anjalipujari8888@gmail.com>
     RUN apt-get update
     ENV xyz=Welcome
     EXPOSE 90/udp
     ENTRYPOINT ["top","-b"]
     CMD ["echo","Welcome to my New Dockerfile"]
     VOLUME /myvol
     RUN dir C:\
  -->then save file with :wq 
     docker build -t ubun1 .
     docker run ubun1
     
	
46. Dockerhub:-
	Find a application you care about on docker hub.
	Launch the container.
	Install another application in it.
	Save (commit) the image.
	Upload that to docker hub in your account and share it with a colleague, ask them to use your image and run the container out of it in their machine/vm.
ANS: STEP 1: docker pull ubuntu
     STEP 2: docker run -it --name mynginx ubuntu
     STEP 3: verify nginx is installed 
             root@71bd9697d8db:/# which nginx
             root@71bd9697d8db:/# apt-get update
             root@71bd9697d8db:/# apt-get install nginx
             root@71bd9697d8db:/# which nginx
             root@71bd9697d8db:/# apt-get install curl
             root@71bd9697d8db:/# service nginx start
             root@71bd9697d8db:/# curl http://localhost:80
             root@71bd9697d8db:/# exit
    STEP 4:  docker commit mynginx anjalipujari/my_nginx
    STEP 5:  docker images 
             docker login 
    STEP 8:  docker push anjalipujari/my_nginx